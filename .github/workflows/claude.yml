name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  # 自動レビュー用のイベント追加
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # 既存の@claudeメンション対応ジョブ
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Claude[bot]"
          git config --global user.email "claude-bot@anthropic.com"

      - name: Parse Claude Command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body || github.event.issue.body || github.event.review.body }}"
          
          # Extract command after @claude
          COMMAND=$(echo "$COMMENT_BODY" | grep -oP '@claude\s+\K.*' | head -n1)
          
          # Check for specific commands
          if echo "$COMMAND" | grep -q "^clone"; then
            echo "action=clone" >> $GITHUB_OUTPUT
            # Extract URL from clone command
            URL=$(echo "$COMMAND" | grep -oP 'clone\s+\K\S+')
            echo "clone_url=$URL" >> $GITHUB_OUTPUT
          elif echo "$COMMAND" | grep -q "^pr\s"; then
            echo "action=pr" >> $GITHUB_OUTPUT
            # Extract PR details
            PR_TITLE=$(echo "$COMMAND" | grep -oP 'pr\s+"[^"]+' | sed 's/pr\s*"//')
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          else
            echo "action=claude" >> $GITHUB_OUTPUT
          fi

      # Clone repository action
      - name: Clone External Repository
        if: steps.parse.outputs.action == 'clone'
        run: |
          CLONE_URL="${{ steps.parse.outputs.clone_url }}"
          if [ -z "$CLONE_URL" ]; then
            echo "Error: No URL provided for clone command"
            exit 1
          fi
          
          # Extract repo name from URL
          REPO_NAME=$(basename -s .git "$CLONE_URL")
          
          # Clone the repository
          git clone "$CLONE_URL" "external-repos/$REPO_NAME"
          
          # Create a new branch
          BRANCH_NAME="clone-$REPO_NAME-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Add cloned content
          git add "external-repos/$REPO_NAME"
          git commit -m "Clone external repository: $REPO_NAME"
          
          # Push to remote
          git push origin "$BRANCH_NAME"
          
          # Create PR
          gh pr create \
            --title "Clone: $REPO_NAME" \
            --body "This PR adds the cloned repository $REPO_NAME from $CLONE_URL" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create PR action
      - name: Create Pull Request
        if: steps.parse.outputs.action == 'pr'
        run: |
          PR_TITLE="${{ steps.parse.outputs.pr_title }}"
          if [ -z "$PR_TITLE" ]; then
            PR_TITLE="New feature"
          fi
          
          # Create a new branch
          BRANCH_NAME="claude-pr-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Get issue or comment context
          CONTEXT="${{ github.event.comment.body || github.event.issue.body }}"
          
          # Create PR using gh CLI
          gh pr create \
            --title "$PR_TITLE" \
            --body "Created by Claude based on request: $CONTEXT" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Default Claude action
      - name: Run Claude Code
        if: steps.parse.outputs.action == 'claude'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_phrase: "@claude"

  # 新規追加：自動コードレビュージョブ
  auto-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Automatic Code Review
        id: auto-review
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            このプルリクエストのコード変更を詳細にレビューしてください。
            以下の観点で評価し、具体的な修正提案をコメントで提供してください：

            ## レビュー観点
            1. **🐛 バグとエラーハンドリング**
               - 潜在的なバグやエラーケースの特定
               - 例外処理の不備やnull/undefined チェックの漏れ
               - エッジケースの考慮

            2. **📝 コード品質**
               - 可読性とメンテナンス性
               - 命名規則の遵守
               - コードの重複や不要な複雑さ
               - 関数・クラスの責務の明確性

            3. **⚡ パフォーマンス**
               - 非効率なアルゴリズムやクエリ
               - メモリリークの可能性
               - 不要な計算やAPI呼び出し
               - データベースアクセスの最適化

            4. **🔒 セキュリティ**
               - XSS、SQL injection等の脆弱性
               - 認証・認可の不備
               - 機密情報の漏洩リスク
               - 入力値検証の確認

            5. **✅ ベストプラクティス**
               - 言語・フレームワーク固有の慣例
               - アーキテクチャパターンの適切性
               - テストカバレッジの確認
               - ドキュメント・コメントの充実度

            ## 出力形式
            レビュー結果は以下のチェックリスト形式のマークダウンで出力してください：

            ## 🤖 自動コードレビュー結果

            ### 📋 修正チェックリスト
            各項目を確認・修正したら `- [x]` にチェックを入れてください：

            #### 🔴 高優先度（修正必須）
            - [ ] **📁 `[ファイル名:行番号]`** - [問題の要約]
              - **問題:** [具体的な問題の説明]
              - **修正案:** `[修正内容の要約]`
              - **理由:** [修正が必要な理由]
              <details>
              <summary>🔧 修正コード例</summary>
              
              ```[言語]
              [修正後のコード例]
              ```
              </details>

            #### 🟡 中優先度（修正推奨）
            - [ ] **📁 `[ファイル名:行番号]`** - [問題の要約]
              - **問題:** [具体的な問題の説明]
              - **修正案:** `[修正内容の要約]`
              - **理由:** [修正が推奨される理由]

            #### 🟢 低優先度（改善提案）
            - [ ] **📁 `[ファイル名:行番号]`** - [改善案の要約]
              - **提案:** [具体的な改善提案]
              - **効果:** [改善による効果]

            ### ✅ 良い実装ポイント
            - ✅ [具体的な良い実装ポイント1]
            - ✅ [具体的な良い実装ポイント2]
            - ✅ [具体的な良い実装ポイント3]

            ### 📊 レビューサマリー
            | 項目 | 結果 |
            |------|------|
            | 🔴 修正必須 | [数] 件 |
            | 🟡 修正推奨 | [数] 件 |
            | 🟢 改善提案 | [数] 件 |
            | **総合評価** | **[🔴要修正/🟡要検討/🟢承認可能]** |

            **💬 レビューコメント:** [総合的な評価とアドバイス]

            **注意:** 
            - 重要な問題が見つからない場合でも、コードの良い点を積極的に評価してください
            - チェックリストは修正完了時にチェックを入れて進捗を管理してください
            - 質問がある場合は `@claude [質問内容]` でメンションしてください
          allowed_tools: "Bash(git diff --name-only HEAD~1),Bash(git diff HEAD~1),View,GlobTool,GrepTool"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: 10

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let reviewContent = '';
            
            if ('${{ steps.auto-review.outputs.conclusion }}' === 'success') {
              try {
                const executionFile = '${{ steps.auto-review.outputs.execution_file }}';
                if (fs.existsSync(executionFile)) {
                  const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));
                  
                  // Claude の最新の回答を取得
                  for (let i = executionLog.length - 1; i >= 0; i--) {
                    if (executionLog[i].role === 'assistant' && executionLog[i].content) {
                      reviewContent = executionLog[i].content;
                      break;
                    }
                  }
                }
              } catch (error) {
                console.error('Error reading execution file:', error);
                reviewContent = '';
              }
            }
            
            // レビューコメントを投稿
            if (reviewContent) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reviewContent + '\n\n---\n' +
                      '**🔄 自動レビューについて**\n' +
                      '- このレビューはClaude AIによって自動生成されました\n' +
                      '- 人間によるレビューも併せて実施することを推奨します\n' +
                      '- 質問や追加のレビューが必要な場合は `@claude [質問内容]` でメンションしてください'
              });
            } else {
              // レビューに失敗した場合のフォールバック
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '⚠️ **自動コードレビューでエラーが発生しました**\n\n' +
                      'ワークフローログを確認してください。\n' +
                      '手動でのレビューを実施するか、`@claude このPRをレビューして` でメンションしてください。'
              });
            }