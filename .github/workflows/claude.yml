name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  # 自動レビュー用のイベント追加
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # 既存の@claudeメンション対応ジョブ
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Claude[bot]"
          git config --global user.email "claude-bot@anthropic.com"

      - name: Parse Claude Command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body || github.event.issue.body || github.event.review.body }}"
          
          # Extract command after @claude
          COMMAND=$(echo "$COMMENT_BODY" | grep -oP '@claude\s+\K.*' | head -n1)
          
          # Check for specific commands
          if echo "$COMMAND" | grep -q "^clone"; then
            echo "action=clone" >> $GITHUB_OUTPUT
            # Extract URL from clone command
            URL=$(echo "$COMMAND" | grep -oP 'clone\s+\K\S+')
            echo "clone_url=$URL" >> $GITHUB_OUTPUT
          elif echo "$COMMAND" | grep -q "^pr\s"; then
            echo "action=pr" >> $GITHUB_OUTPUT
            # Extract PR details
            PR_TITLE=$(echo "$COMMAND" | grep -oP 'pr\s+"[^"]+' | sed 's/pr\s*"//')
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          else
            echo "action=claude" >> $GITHUB_OUTPUT
          fi

      # Clone repository action
      - name: Clone External Repository
        if: steps.parse.outputs.action == 'clone'
        run: |
          CLONE_URL="${{ steps.parse.outputs.clone_url }}"
          if [ -z "$CLONE_URL" ]; then
            echo "Error: No URL provided for clone command"
            exit 1
          fi
          
          # Extract repo name from URL
          REPO_NAME=$(basename -s .git "$CLONE_URL")
          
          # Clone the repository
          git clone "$CLONE_URL" "external-repos/$REPO_NAME"
          
          # Create a new branch
          BRANCH_NAME="clone-$REPO_NAME-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Add cloned content
          git add "external-repos/$REPO_NAME"
          git commit -m "Clone external repository: $REPO_NAME"
          
          # Push to remote
          git push origin "$BRANCH_NAME"
          
          # Create PR
          gh pr create \
            --title "Clone: $REPO_NAME" \
            --body "This PR adds the cloned repository $REPO_NAME from $CLONE_URL" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create PR action
      - name: Create Pull Request
        if: steps.parse.outputs.action == 'pr'
        run: |
          PR_TITLE="${{ steps.parse.outputs.pr_title }}"
          if [ -z "$PR_TITLE" ]; then
            PR_TITLE="New feature"
          fi
          
          # Create a new branch
          BRANCH_NAME="claude-pr-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Get issue or comment context
          CONTEXT="${{ github.event.comment.body || github.event.issue.body }}"
          
          # Create PR using gh CLI
          gh pr create \
            --title "$PR_TITLE" \
            --body "Created by Claude based on request: $CONTEXT" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Default Claude action
      - name: Run Claude Code
        if: steps.parse.outputs.action == 'claude'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_phrase: "@claude"

  # 制限付き自動コードレビュージョブ
  auto-review:
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'opened' &&
      !contains(github.event.pull_request.title, '[skip-review]') &&
      !contains(github.event.pull_request.title, 'WIP') &&
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR Size Limits
        id: size-check
        run: |
          # 変更ファイル数をチェック
          CHANGED_FILES=$(git diff --name-only HEAD~1 | wc -l)
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # 大きな変更の場合はスキップ
          if [ "$CHANGED_FILES" -gt 15 ]; then
            echo "skip_review=true" >> $GITHUB_OUTPUT
            echo "reason=ファイル数が多すぎます ($CHANGED_FILES ファイル)" >> $GITHUB_OUTPUT
          else
            # 変更行数もチェック
            CHANGED_LINES=$(git diff --shortstat HEAD~1 | grep -o '[0-9]* insertion' | cut -d' ' -f1 || echo "0")
            if [ "$CHANGED_LINES" -gt 500 ]; then
              echo "skip_review=true" >> $GITHUB_OUTPUT
              echo "reason=変更行数が多すぎます ($CHANGED_LINES 行)" >> $GITHUB_OUTPUT
            else
              echo "skip_review=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Post Size Limit Message
        if: steps.size-check.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **自動レビューをスキップしました**\n\n' +
                    '理由: ${{ steps.size-check.outputs.reason }}\n\n' +
                    '大きな変更のため、手動でのレビューを推奨します。\n' +
                    '必要な場合は `@claude このPRをレビューして` でメンションしてください。'
            });

      - name: Run Lightweight Code Review
        if: steps.size-check.outputs.skip_review == 'false'
        id: auto-review
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            このPRの変更を簡潔にレビューしてください（最重要点のみ）：

            **チェック項目：**
            1. 🐛 **バグ・エラー** - 明らかなバグやエラーハンドリングの問題
            2. 🔒 **セキュリティ** - 脆弱性や機密情報漏洩リスク
            3. ⚡ **重大なパフォーマンス問題** - 明らかに非効率な実装

            **出力形式：**
            ## 🤖 簡易自動レビュー

            ### 🔴 修正必須項目
            [問題がある場合のみ記載]

            ### ✅ 確認完了
            - 基本的なバグチェック: OK
            - セキュリティチェック: OK  
            - パフォーマンスチェック: OK

            **総合:** [問題なし/要確認] 
            
            詳細レビューが必要な場合は `@claude 詳細レビュー` でリクエストしてください。
          allowed_tools: "Bash(git diff --name-only HEAD~1),Bash(git diff HEAD~1 --stat),View"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: 3

      - name: Post Review Comment
        if: steps.auto-review.conclusion == 'success' && steps.size-check.outputs.skip_review == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let reviewContent = '';
            
            try {
              const executionFile = '${{ steps.auto-review.outputs.execution_file }}';
              if (fs.existsSync(executionFile)) {
                const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));
                
                // Claude の最新の回答を取得
                for (let i = executionLog.length - 1; i >= 0; i--) {
                  if (executionLog[i].role === 'assistant' && executionLog[i].content) {
                    reviewContent = executionLog[i].content;
                    break;
                  }
                }
              }
            } catch (error) {
              console.error('Error reading execution file:', error);
            }
            
            // 簡潔なレビューコメントを投稿
            if (reviewContent) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reviewContent + '\n\n---\n' +
                      '**🤖 簡易自動レビュー完了** | ' +
                      '詳細レビュー: `@claude 詳細レビュー` | ' +
                      'カスタム質問: `@claude [質問内容]`'
              });
            }