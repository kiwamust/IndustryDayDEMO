# Live Reference Info - MVP-1 タスクリスト ⚡

## 🎯 目標: 10分で動作するプロトタイプ完成

---

## ⏰ 分 1-3: 基盤構築 (3分)

### 🔥 最優先
- [ ] `mvp-1/` ディレクトリ作成
- [ ] `index.html` 基本構造作成
- [ ] `style.css` 基本スタイル作成
- [ ] `script.js` 基本構造作成

### ✅ 完了基準
- ブラウザで開いて基本的なレイアウトが表示される

---

## ⏰ 分 4-6: コア機能実装 (3分)

### 🔥 最優先
- [ ] テキストエリア実装（入力方法問わず）
- [ ] 自動キーワード抽出機能（JavaScript、リアルタイム）
- [ ] Wikipedia API検索機能
- [ ] 検索結果表示機能（右側カラム）

### ✅ 完了基準  
- キーワード入力 → 検索 → 結果表示が動作する

---

## ⏰ 分 7-9: UI調整・テスト (3分)

### 🔶 中優先（美しいUI）
- [ ] モダンなCSS（グラデーション・カード型）
- [ ] スムーズなアニメーション効果
- [ ] レスポンシブ対応（Grid/Flexbox）
- [ ] 美しいキーワードタグ表示

### ✅ 完了基準
- 見た目が整っていて、エラー時もクラッシュしない

---

## ⏰ 分 10: 最終確認 (1分)

### 🔥 最優先  
- [ ] 全機能動作テスト
- [ ] デモシナリオ確認
- [ ] ブラウザで動作確認

### ✅ 完了基準
- デモで説明できる状態

---

## 📁 ファイル作成優先順位

### 1. index.html (必須)
```html
<!DOCTYPE html>
<html>
<head>
    <title>Live Reference Info - MVP-1</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- テキストエリア + 検索結果の2カラムレイアウト -->
    <textarea id="inputText" placeholder="ここにテキストを入力（手入力・音声認識・ペースト）"></textarea>
    <div id="results"></div>
    <script src="script.js"></script>
</body>
</html>
```

### 2. style.css (美しいUI)
```css
/* モダンなデザインシステム */
:root {
  --primary: #667eea;
  --accent: #f093fb;
  --bg-primary: #fafbfc;
  --bg-secondary: #ffffff;
}

/* グリッドレイアウト + カード型デザイン */
.main-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.panel {
  background: white;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 4px 20px rgba(0,0,0,0.08);
}
```

### 3. script.js (必須)
```javascript
// キーワード抽出 + 検索機能
function extractKeywords(text) {
    // シンプルなキーワード抽出
}
function searchKeyword(query) {
    // Wikipedia API呼び出し
}
```

---

## 🚨 時間節約のコツ

### 💡 簡略化ポイント
- **キーワード抽出**: シンプルな形態素解析（名詞・カタカナ語のみ）
- **API**: Wikipedia API（認証不要、シンプル）
- **スタイル**: CDN（Bootstrap/Tailwind）活用
- **検索**: シンプルなfetch() 
- **エラー処理**: 最低限のtry-catch

### 🚫 絶対にやらないこと
- 複雑なCSS アニメーション
- 複数API の統合
- データベース連携
- 高度なエラーハンドリング
- パフォーマンス最適化

---

## 🔧 技術選択（時間効率重視）

### ✅ 使用する技術
- **HTML5**: 基本構造
- **CSS3**: Flexbox/Grid
- **Vanilla JavaScript**: 外部ライブラリなし
- **Wikipedia API**: 無料、認証不要
- **CDN**: Bootstrap Icons

### ❌ 使用しない技術
- React/Vue （設定時間がかかる）
- Node.js サーバー
- データベース
- 複雑なAPI

---

## 📋 チェックリスト

### 🎯 最低限の成功基準
- [ ] ブラウザで表示される
- [ ] キーワード入力できる
- [ ] 検索ボタンが動作する
- [ ] 何らかの結果が表示される
- [ ] 見た目が破綻していない

### 🌟 理想的な成功基準
- [ ] 美しいUI
- [ ] 高速な検索
- [ ] 履歴機能
- [ ] エラーハンドリング
- [ ] レスポンシブ対応

---

## 🚀 デモ準備

### 📝 説明ポイント
1. **コンセプト**: リアルタイム参考情報表示
2. **使用方法**: キーワード入力 → 検索 → 結果表示
3. **将来展望**: 音声認識 → AI強化 → 統合機能

### 🎬 デモシナリオ
1. **テキストエリアに入力** → "今日AIについて議論したが、機械学習の応用が興味深い"
   - 手入力、Willowからの音声認識、ペーストなど方法は問わず
2. **自動キーワード抽出** → 「AI」「機械学習」が抽出・表示
3. **Wikipedia検索自動実行** → 関連記事が右側に表示
4. **テキスト追加・変更** → リアルタイムで結果更新確認
5. **シンプルな操作性** → 入力するだけで情報が自動表示

---

**⏱️ 重要**: 各フェーズで時間を厳守し、完璧を求めずに動作優先で進める
**🎯 ゴール**: 10分後にデモできる状態 